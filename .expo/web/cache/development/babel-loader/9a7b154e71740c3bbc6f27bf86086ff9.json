{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Text, Layout } from '@ui-kitten/components';\nimport { useForm, Controller } from 'react-hook-form';\nimport { login } from \"../hooks/ApiHooks\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { PropTypes } from 'prop-types';\nimport { MainContext } from \"../contexts/MainContext\";\nimport FormInput from \"./formComponents/FormInput\";\nimport { FormButton } from \"./elements/AppButton\";\nimport colors from \"../utils/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginForm = function LoginForm() {\n  var _useContext = useContext(MainContext),\n      setIsLoggedIn = _useContext.setIsLoggedIn,\n      setUser = _useContext.setUser;\n\n  var _useForm = useForm({\n    defaultValues: {\n      username: '',\n      password: ''\n    }\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.formState.errors;\n\n  var onSubmit = function onSubmit(data) {\n    var userData;\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(login(data));\n\n          case 3:\n            userData = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('userToken', userData.token));\n\n          case 6:\n            setUser(userData.user);\n            setIsLoggedIn(true);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  return _jsxs(Layout, {\n    style: styles.layout,\n    children: [_jsx(Controller, {\n      control: control,\n      rules: {\n        required: true\n      },\n      render: function render(_ref) {\n        var _ref$field = _ref.field,\n            onChange = _ref$field.onChange,\n            onBlur = _ref$field.onBlur,\n            value = _ref$field.value;\n        return _jsx(FormInput, {\n          style: styles.input,\n          iconName: \"person-outline\",\n          name: \"Username\",\n          onBlur: onBlur,\n          onChange: onChange,\n          value: value,\n          textEntry: false\n        });\n      },\n      name: \"username\"\n    }), errors.username && _jsx(Text, {\n      status: \"danger\",\n      children: \"This is required.\"\n    }), _jsx(Controller, {\n      control: control,\n      rules: {\n        required: true,\n        maxLength: 100\n      },\n      render: function render(_ref2) {\n        var _ref2$field = _ref2.field,\n            onChange = _ref2$field.onChange,\n            onBlur = _ref2$field.onBlur,\n            value = _ref2$field.value;\n        return _jsx(FormInput, {\n          style: styles.input,\n          iconName: \"lock-outline\",\n          name: \"Password\",\n          onBlur: onBlur,\n          onChange: onChange,\n          value: value,\n          textEntry: true\n        });\n      },\n      name: \"password\"\n    }), errors.password && _jsx(Text, {\n      status: \"danger\",\n      children: \"This is required.\"\n    }), _jsx(Text, {\n      style: styles.password,\n      children: \"Forgot password?\"\n    }), _jsx(FormButton, {\n      handleSubmit: handleSubmit,\n      onSubmit: onSubmit,\n      text: \"Login\"\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  layout: {\n    height: 350,\n    justifyContent: 'space-around',\n    backgroundColor: colors.primary,\n    borderColor: colors.primary\n  },\n  input: {},\n  password: {\n    marginBottom: 100,\n    alignSelf: 'flex-end'\n  }\n});\nLoginForm.propTypes = {\n  setFormToggle: PropTypes.func\n};\nexport default LoginForm;","map":{"version":3,"sources":["/Users/anhuynh2503/Desktop/React Native/Project/pre-owned/components/LoginForm.js"],"names":["React","useContext","Text","Layout","useForm","Controller","login","AsyncStorage","PropTypes","MainContext","FormInput","FormButton","colors","LoginForm","setIsLoggedIn","setUser","defaultValues","username","password","control","handleSubmit","errors","formState","onSubmit","data","userData","setItem","token","user","console","error","styles","layout","required","field","onChange","onBlur","value","input","maxLength","StyleSheet","create","height","justifyContent","backgroundColor","primary","borderColor","marginBottom","alignSelf","propTypes","setFormToggle","func"],"mappings":"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","sourcesContent":["import React, {useContext} from 'react';\nimport {StyleSheet} from 'react-native';\nimport {Text, Layout} from '@ui-kitten/components';\nimport {useForm, Controller} from 'react-hook-form';\nimport {login} from '../hooks/ApiHooks';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport {PropTypes} from 'prop-types';\nimport {MainContext} from '../contexts/MainContext';\nimport FormInput from './formComponents/FormInput';\nimport {FormButton} from './elements/AppButton';\nimport colors from '../utils/colors';\n\nconst LoginForm = () => {\n  const {setIsLoggedIn, setUser} = useContext(MainContext);\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n  } = useForm({\n    defaultValues: {\n      username: '',\n      password: '',\n    },\n  });\n\n  const onSubmit = async (data) => {\n    try {\n      const userData = await login(data);\n      await AsyncStorage.setItem('userToken', userData.token);\n      setUser(userData.user);\n      setIsLoggedIn(true);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <Layout style={styles.layout}>\n      <Controller\n        control={control}\n        rules={{\n          required: true,\n        }}\n        render={({field: {onChange, onBlur, value}}) => (\n          <FormInput\n            style={styles.input}\n            iconName=\"person-outline\"\n            name=\"Username\"\n            onBlur={onBlur}\n            onChange={onChange}\n            value={value}\n            textEntry={false}\n          />\n        )}\n        name=\"username\"\n      />\n      {errors.username && <Text status=\"danger\">This is required.</Text>}\n\n      <Controller\n        control={control}\n        rules={{\n          required: true,\n          maxLength: 100,\n        }}\n        render={({field: {onChange, onBlur, value}}) => (\n          <FormInput\n            style={styles.input}\n            iconName=\"lock-outline\"\n            name=\"Password\"\n            onBlur={onBlur}\n            onChange={onChange}\n            value={value}\n            textEntry={true}\n          />\n        )}\n        name=\"password\"\n      />\n      {errors.password && <Text status=\"danger\">This is required.</Text>}\n\n      <Text style={styles.password}>Forgot password?</Text>\n      <FormButton\n        handleSubmit={handleSubmit}\n        onSubmit={onSubmit}\n        text=\"Login\"\n      />\n    </Layout>\n  );\n};\n\nconst styles = StyleSheet.create({\n  layout: {\n    height: 350,\n    justifyContent: 'space-around',\n    backgroundColor: colors.primary,\n    borderColor: colors.primary,\n  },\n  input: {\n    // margin: 10,\n  },\n  password: {\n    marginBottom: 100,\n    alignSelf: 'flex-end',\n  },\n\n});\n\nLoginForm.propTypes = {\n  setFormToggle: PropTypes.func,\n};\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}