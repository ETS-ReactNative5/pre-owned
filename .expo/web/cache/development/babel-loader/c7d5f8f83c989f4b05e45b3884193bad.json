{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useContext, useEffect, useState } from 'react';\nimport { MainContext } from \"../contexts/MainContext\";\nimport { baseUrl } from \"../utils/url\";\n\nvar fetchData = function fetchData(url) {\n  var options,\n      response,\n      json,\n      message,\n      _args = arguments;\n  return _regeneratorRuntime.async(function fetchData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch(url, options));\n\n        case 4:\n          response = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 7:\n          json = _context.sent;\n\n          if (!response.ok) {\n            _context.next = 12;\n            break;\n          }\n\n          return _context.abrupt(\"return\", json);\n\n        case 12:\n          message = json.error ? json.message + \": \" + json.error : json.message;\n          throw new Error(message || response.statusText);\n\n        case 14:\n          _context.next = 19;\n          break;\n\n        case 16:\n          _context.prev = 16;\n          _context.t0 = _context[\"catch\"](1);\n          throw new Error(_context.t0.message);\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 16]], Promise);\n};\n\nvar signUp = function signUp(data) {\n  var options;\n  return _regeneratorRuntime.async(function signUp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          options = {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n          };\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetchData(baseUrl + \"users\", options));\n\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar login = function login(userCredentials) {\n  var options;\n  return _regeneratorRuntime.async(function login$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          options = {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userCredentials)\n          };\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(fetchData(baseUrl + 'login', options));\n\n        case 3:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar checkUserName = function checkUserName(inputName) {\n  var result;\n  return _regeneratorRuntime.async(function checkUserName$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(fetchData(baseUrl + \"users/username/\" + inputName));\n\n        case 2:\n          result = _context4.sent;\n          return _context4.abrupt(\"return\", result.available);\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar getUserByToken = function getUserByToken(token) {\n  var options;\n  return _regeneratorRuntime.async(function getUserByToken$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          options = {\n            method: 'GET',\n            headers: {\n              'x-access-token': token\n            }\n          };\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(fetchData(baseUrl + 'users/user', options));\n\n        case 3:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport { signUp, login, checkUserName, getUserByToken };","map":{"version":3,"sources":["/Users/anhuynh2503/Desktop/React Native/Project/pre-owned/hooks/ApiHooks.js"],"names":["useContext","useEffect","useState","MainContext","baseUrl","fetchData","url","options","fetch","response","json","ok","message","error","Error","statusText","signUp","data","method","headers","body","JSON","stringify","login","userCredentials","checkUserName","inputName","result","available","getUserByToken","token"],"mappings":";AAAA,SAAQA,UAAR,EAAoBC,SAApB,EAA+BC,QAA/B,QAA8C,OAA9C;AACA,SAAQC,WAAR;AACA,SAAQC,OAAR;;AAGA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,UAAAA,OAAZ,2DAAsB,EAAtB;AAAA;AAAA;AAAA,2CAESC,KAAK,CAACF,GAAD,EAAMC,OAAN,CAFd;;AAAA;AAERE,UAAAA,QAFQ;AAAA;AAAA,2CAGKA,QAAQ,CAACC,IAAT,EAHL;;AAAA;AAGRA,UAAAA,IAHQ;;AAAA,eAIVD,QAAQ,CAACE,EAJC;AAAA;AAAA;AAAA;;AAAA,2CAKLD,IALK;;AAAA;AAONE,UAAAA,OAPM,GAOIF,IAAI,CAACG,KAAL,GACTH,IAAI,CAACE,OADI,UACQF,IAAI,CAACG,KADb,GAEZH,IAAI,CAACE,OATG;AAAA,gBAUN,IAAIE,KAAJ,CAAUF,OAAO,IAAIH,QAAQ,CAACM,UAA9B,CAVM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,gBAaR,IAAID,KAAJ,CAAU,YAAMF,OAAhB,CAbQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB;;AAkBA,IAAMI,MAAM,GAAG,SAATA,MAAS,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACPV,UAAAA,OADO,GACG;AACdW,YAAAA,MAAM,EAAE,MADM;AAEdC,YAAAA,OAAO,EAAE;AACP,8BAAgB;AADT,aAFK;AAKdC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;AALQ,WADH;AAAA;AAAA,2CASAZ,SAAS,CAAID,OAAJ,YAAoBG,OAApB,CATT;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf;;AAaA,IAAMgB,KAAK,GAAG,SAARA,KAAQ,CAAOC,eAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAENjB,UAAAA,OAFM,GAEI;AACdW,YAAAA,MAAM,EAAE,MADM;AAEdC,YAAAA,OAAO,EAAE;AACP,8BAAgB;AADT,aAFK;AAKdC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeE,eAAf;AALQ,WAFJ;AAAA;AAAA,2CASCnB,SAAS,CAACD,OAAO,GAAG,OAAX,EAAoBG,OAApB,CATV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;;AAaA,IAAMkB,aAAa,GAAG,SAAhBA,aAAgB,CAAOC,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACCrB,SAAS,CAAID,OAAJ,uBAA6BsB,SAA7B,CADV;;AAAA;AACdC,UAAAA,MADc;AAAA,4CAEbA,MAAM,CAACC,SAFM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;;AAMA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACfvB,UAAAA,OADe,GACL;AACdW,YAAAA,MAAM,EAAE,KADM;AAEdC,YAAAA,OAAO,EAAE;AAAC,gCAAkBW;AAAnB;AAFK,WADK;AAAA;AAAA,2CAKRzB,SAAS,CAACD,OAAO,GAAG,YAAX,EAAyBG,OAAzB,CALD;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAQA,SAAQS,MAAR,EAAgBO,KAAhB,EAAuBE,aAAvB,EAAsCI,cAAtC","sourcesContent":["import {useContext, useEffect, useState} from 'react';\nimport {MainContext} from '../contexts/MainContext';\nimport {baseUrl} from '../utils/url';\n\n// Communicating with server\nconst fetchData = async (url, options = {}) => {\n  try {\n    const response = await fetch(url, options);\n    const json = await response.json();\n    if (response.ok) {\n      return json;\n    } else {\n      const message = json.error\n        ? `${json.message}: ${json.error}`\n        : json.message;\n      throw new Error(message || response.statusText);\n    }\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\n// Function for user registration\nconst signUp = async (data) => {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  };\n\n  return await fetchData(`${baseUrl}users`, options);\n};\n\n// Function for use login\nconst login = async (userCredentials) => {\n  // user credentials format: {username: 'someUsername', password: 'somePassword'}\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userCredentials),\n  };\n  return await fetchData(baseUrl + 'login', options);\n};\n\n// Checking user name is available? in server for registration\nconst checkUserName = async (inputName) => {\n  const result = await fetchData(`${baseUrl}users/username/${inputName}`);\n  return result.available;\n};\n\n// Gets user by their token\nconst getUserByToken = async (token) => {\n  const options = {\n    method: 'GET',\n    headers: {'x-access-token': token},\n  };\n  return await fetchData(baseUrl + 'users/user', options);\n};\n\nexport {signUp, login, checkUserName, getUserByToken};\n"]},"metadata":{},"sourceType":"module"}